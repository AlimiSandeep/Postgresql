

testdb=# select * from category;
 cat_id | cat_name 
--------+----------
      1 | COMPUTER
      2 | MOBILE
      3 | FASHION
(3 rows)

testdb=# select * from products;
 prod_id |     prod_name     |  price   | cid 
---------+-------------------+----------+-----
    1001 | ACER ASPIRE       | 33000.00 |   1
    1002 | DELL INSPIRON     | 43000.00 |   1
    1003 | LENOVE IDEAPAD    | 18000.00 |   1
    1004 | SAMSUNG GALAXY S9 | 35000.00 |   2
    1005 | IPHONE 7          | 60000.00 |   2
    1006 | HONOR 6X          |  9000.00 |   2
    1007 | NOKIA 1100        |  4000.00 |    
(7 rows)

******************************Aggregate Functions:*************************

An aggregate function is a special kind of function that operates on several rows of a query at once,
returning a single result. Such functions are generally only used in queries which make use of the GROUP BY clause 
to associate rows together by like criteria,though they may be used in queries which only contain aggregate functions 
in their target list.When performing the latter, the aggregate function operates on all selected rows from the result set


**********COUNT**********

Syntax:count( expression  )

Returns the number of values, per each aggregated group of rows, for which expression is not NULL
When an asterisk(*) is used with count function, returns the total number of rows.

----------Number of products in product table----------

testdb=# select count(*) "Total Products" from products;
 Total Products 
----------------
              7
(1 row)

----------Count num of products that have price>=25000 in mobile category----------

testdb=# select count(prod_id) from products p inner join category c on p.cid=c.cat_id where c.cat_name='MOBILE' and p.price>=25000;
 count 
-------
     2
(1 row)


**********MAX**********

Syntax:max( expression  )
Returns the maximum value of expression in the grouped rows

----------Highest priced mobile price----------
testdb=# select max(p.price) "Top End Mobile" from products p inner join category c on p.cid=c.cat_id where c.cat_name='MOBILE';
 Top End Mobile 
----------------
       60000.00
(1 row)

**********MIN**********
Syntax:min( expression  )
Returns the minimum value of expression in the grouped rows

----------Cheap mobile price----------
testdb=# select min(p.price) "Low End Mobile" from products p inner join category c on p.cid=c.cat_id where c.cat_name='MOBILE';
 Low End Mobile 
----------------
        9000.00
(1 row)

**********SUM**********
Syntax:sum( expression  )
Returns the sum of the values of expression in the grouped rows

----------Total price of mobiles----------
testdb=# select sum(p.price) "Low End Mobile" from products p inner join category c on p.cid=c.cat_id where c.cat_name='MOBILE';
 Low End Mobile 
----------------
      104000.00
(1 row)

**********AVG**********
Syntax:avg( expression  )
Returns the average of the expression values from all rows in a group.

----------Average price for mobile category----------

testdb=# select round(avg(p.price),2) from products p inner join category c on p.cid=c.cat_id where c.cat_name='MOBILE';
  round   
----------
 34666.67
(1 row)



**********************************************Group By - Having*******************************

**********Group By:**********
The group by clause is used to divide the rows in a table into smaller groups that have the same values in the specified columns.
This clause is used with a SELECT statement to combine a group of rows based on the values or a particular column or expression.

**********Having:**********
HAVING clause is used for conditional retrieval of rows from a grouped result.
since WHERE clause can only use to restrict individual rows.
-HAVING cannot be used without grouping.

----------Display num of products,max price,min price in each category name----------

testdb=#  select c.cat_name,count(p.prod_id),max(p.price),min(p.price) from category
c LEFT JOIN products p on c.cat_id=p.cid group by c.cat_name;
 cat_name | count |   max    |   min    
----------+-------+----------+----------
 MOBILE   |     3 | 60000.00 |  9000.00
 COMPUTER |     3 | 43000.00 | 18000.00
 FASHION  |     0 |          |         
(3 rows)

----------Display the avg price for all categories and exclude the group that contains one product or less----------

testdb=# select c.cat_name,round(avg(p.price),2) "Avg Price" from category c LEFT JOIN products p
on c.cat_id=p.cid group by c.cat_name having count(p.prod_id)>1;
 cat_name | Avg Price 
----------+-----------
 MOBILE   |  34666.67
 COMPUTER |  31333.33
(2 rows)

----------Display num of products for all categories whose price is greater than or equal to 10000 and e
xclude the group that have less than two products----------
 
testdb=# select c.cat_name,count(p.prod_id) "No. of products" from category c LEFT JOIN products p 
on c.cat_id=p.cid where p.price>=10000 group by c.cat_name having count(p.prod_id)>=2;

 cat_name | No. of products 
----------+-----------------
 MOBILE   |               2
 COMPUTER |               3
(2 rows)




testdb=# select * from category;
 cat_id | cat_name 
--------+----------
      1 | COMPUTER
      2 | MOBILE
      3 | FASHION
(3 rows)

testdb=# select * from products;
 prod_id |     prod_name     |  price   | cid 
---------+-------------------+----------+-----
    1001 | ACER ASPIRE       | 33000.00 |   1
    1002 | DELL INSPIRON     | 43000.00 |   1
    1003 | LENOVE IDEAPAD    | 18000.00 |   1
    1004 | SAMSUNG GALAXY S9 | 35000.00 |   2
    1005 | IPHONE 7          | 60000.00 |   2
    1006 | HONOR 6X          |  9000.00 |   2
    1007 | NOKIA 1100        |  4000.00 |    
(7 rows)

******************************Aggregate Functions:*************************

An aggregate function is a special kind of function that operates on several rows of a query at once,
returning a single result. Such functions are generally only used in queries which make use of the GROUP BY clause 
to associate rows together by like criteria,though they may be used in queries which only contain aggregate functions 
in their target list.When performing the latter, the aggregate function operates on all selected rows from the result set


**********COUNT**********

Syntax:count( expression  )

Returns the number of values, per each aggregated group of rows, for which expression is not NULL
When an asterisk(*) is used with count function, returns the total number of rows.

----------Number of products in product table----------

testdb=# select count(*) "Total Products" from products;
 Total Products 
----------------
              7
(1 row)

----------Count num of products that have price>=25000 in mobile category----------

testdb=# select count(prod_id) from products p inner join category c on p.cid=c.cat_id where c.cat_name='MOBILE' and p.price>=25000;
 count 
-------
     2
(1 row)


**********MAX**********

Syntax:max( expression  )
Returns the maximum value of expression in the grouped rows

----------Highest priced mobile price----------
testdb=# select max(p.price) "Top End Mobile" from products p inner join category c on p.cid=c.cat_id where c.cat_name='MOBILE';
 Top End Mobile 
----------------
       60000.00
(1 row)

**********MIN**********
Syntax:min( expression  )
Returns the minimum value of expression in the grouped rows

----------Cheap mobile price----------
testdb=# select min(p.price) "Low End Mobile" from products p inner join category c on p.cid=c.cat_id where c.cat_name='MOBILE';
 Low End Mobile 
----------------
        9000.00
(1 row)

**********SUM**********
Syntax:sum( expression  )
Returns the sum of the values of expression in the grouped rows

----------Total price of mobiles----------
testdb=# select sum(p.price) "Low End Mobile" from products p inner join category c on p.cid=c.cat_id where c.cat_name='MOBILE';
 Low End Mobile 
----------------
      104000.00
(1 row)

**********AVG**********
Syntax:avg( expression  )
Returns the average of the expression values from all rows in a group.

----------Average price for mobile category----------

testdb=# select round(avg(p.price),2) from products p inner join category c on p.cid=c.cat_id where c.cat_name='MOBILE';
  round   
----------
 34666.67
(1 row)



**********************************************Group By - Having*******************************

**********Group By:**********
The group by clause is used to divide the rows in a table into smaller groups that have the same values in the specified columns.
This clause is used with a SELECT statement to combine a group of rows based on the values or a particular column or expression.

**********Having:**********
HAVING clause is used for conditional retrieval of rows from a grouped result.
since WHERE clause can only use to restrict individual rows.
-HAVING cannot be used without grouping.

----------Display num of products,max price,min price in each category name----------

testdb=#  select c.cat_name,count(p.prod_id),max(p.price),min(p.price) from category
c LEFT JOIN products p on c.cat_id=p.cid group by c.cat_name;
 cat_name | count |   max    |   min    
----------+-------+----------+----------
 MOBILE   |     3 | 60000.00 |  9000.00
 COMPUTER |     3 | 43000.00 | 18000.00
 FASHION  |     0 |          |         
(3 rows)

----------Display the avg price for all categories and exclude the group that contains one product or less----------

testdb=# select c.cat_name,round(avg(p.price),2) "Avg Price" from category c LEFT JOIN products p
on c.cat_id=p.cid group by c.cat_name having count(p.prod_id)>1;
 cat_name | Avg Price 
----------+-----------
 MOBILE   |  34666.67
 COMPUTER |  31333.33
(2 rows)

----------Display num of products for all categories whose price is greater than or equal to 10000 and e
xclude the group that have less than two products----------
 
testdb=# select c.cat_name,count(p.prod_id) "No. of products" from category c LEFT JOIN products p 
on c.cat_id=p.cid where p.price>=10000 group by c.cat_name having count(p.prod_id)>=2;

 cat_name | No. of products 
----------+-----------------
 MOBILE   |               2
 COMPUTER |               3
(2 rows)



